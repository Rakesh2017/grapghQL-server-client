{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/rakesh/langara/Term 4/react-apollo-graphql-wmdd-4999-sept-2020/rakesh/client/src/components/list.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from 'react';\nimport { GET_ANIMALS } from '../graphql/queries';\nimport CardList from './cardList';\nimport { useQuery } from '@apollo/client';\nimport Header from './header';\n\nconst AnimalList = () => {\n  _s();\n\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(GET_ANIMALS);\n  if (loading) return 'Loading...';else if (error) return `Error! ${error.message}`;\n  useEffect(() => {}, [data]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: 'grid',\n        gridTemplateColumns: '1fr',\n        gridGap: '10px'\n      },\n      children: data.Animals.map(item => {\n        return /*#__PURE__*/_jsxDEV(CardList, {\n          id: item.id,\n          name: item.name,\n          food: item.food,\n          type: item.type,\n          characterstic: item.properties.type,\n          legs: item.properties.legs\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 24,\n          columnNumber: 32\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 19,\n    columnNumber: 9\n  }, this);\n};\n\n_s(AnimalList, \"MIyWK+WDGXozRNXYyIBuaVd7f4g=\", false, function () {\n  return [useQuery];\n});\n\n_c = AnimalList;\nexport default AnimalList;\n\nvar _c;\n\n$RefreshReg$(_c, \"AnimalList\");","map":{"version":3,"sources":["/Users/rakesh/langara/Term 4/react-apollo-graphql-wmdd-4999-sept-2020/rakesh/client/src/components/list.js"],"names":["React","useEffect","GET_ANIMALS","CardList","useQuery","Header","AnimalList","loading","error","data","message","display","gridTemplateColumns","gridGap","Animals","map","item","id","name","food","type","properties","legs"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,SAASC,WAAT,QAA4B,oBAA5B;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,SAASC,QAAT,QAAyB,gBAAzB;AACA,OAAQC,MAAR,MAAqB,UAArB;;AAEA,MAAMC,UAAU,GAAG,MAAM;AAAA;;AAErB,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA,KAAX;AAAkBC,IAAAA;AAAlB,MAA2BL,QAAQ,CAACF,WAAD,CAAzC;AAEA,MAAIK,OAAJ,EAAa,OAAO,YAAP,CAAb,KACK,IAAIC,KAAJ,EAAW,OAAQ,UAASA,KAAK,CAACE,OAAQ,EAA/B;AAEhBT,EAAAA,SAAS,CAAC,MAAM,CAEf,CAFQ,EAEN,CAACQ,IAAD,CAFM,CAAT;AAIA,sBACI;AAAA,4BACI,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI;AAAK,MAAA,KAAK,EAAE;AAAEE,QAAAA,OAAO,EAAE,MAAX;AAAmBC,QAAAA,mBAAmB,EAAE,KAAxC;AAA+CC,QAAAA,OAAO,EAAE;AAAxD,OAAZ;AAAA,gBAEQJ,IAAI,CAACK,OAAL,CAAaC,GAAb,CAAiBC,IAAI,IAAI;AACrB,4BAAO,QAAC,QAAD;AAAU,UAAA,EAAE,EAAEA,IAAI,CAACC,EAAnB;AAAuB,UAAA,IAAI,EAAED,IAAI,CAACE,IAAlC;AAAwC,UAAA,IAAI,EAAEF,IAAI,CAACG,IAAnD;AAAyD,UAAA,IAAI,EAAEH,IAAI,CAACI,IAApE;AAA0E,UAAA,aAAa,EAAEJ,IAAI,CAACK,UAAL,CAAgBD,IAAzG;AAA+G,UAAA,IAAI,EAAEJ,IAAI,CAACK,UAAL,CAAgBC;AAArI;AAAA;AAAA;AAAA;AAAA,gBAAP;AACH,OAFD;AAFR;AAAA;AAAA;AAAA;AAAA,YAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAYH,CAvBD;;GAAMhB,U;UAE+BF,Q;;;KAF/BE,U;AAyBN,eAAeA,UAAf","sourcesContent":["import React, {useEffect} from 'react'\nimport { GET_ANIMALS } from '../graphql/queries'\nimport CardList from './cardList'\nimport { useQuery } from '@apollo/client';\nimport  Header  from './header'\n\nconst AnimalList = () => {\n\n    const { loading, error, data } = useQuery(GET_ANIMALS)\n\n    if (loading) return 'Loading...'\n    else if (error) return `Error! ${error.message}`\n\n    useEffect(() => {\n        \n    }, [data]);\n\n    return (\n        <div>\n            <Header />\n            <div style={{ display: 'grid', gridTemplateColumns: '1fr', gridGap: '10px' }}>\n                {\n                    data.Animals.map(item => {\n                        return <CardList id={item.id} name={item.name} food={item.food} type={item.type} characterstic={item.properties.type} legs={item.properties.legs} />\n                    })\n                }\n            </div>\n        </div>\n    )\n}\n\nexport default AnimalList"]},"metadata":{},"sourceType":"module"}