{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/rakesh/langara/Term 4/react-apollo-graphql-wmdd-4999-sept-2020/rakesh/client/src/components/list.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { GET_ANIMALS, GET_ANIMAL_NAME } from '../graphql/queries';\nimport CardList from './cardList';\nimport { useQuery, useLazyQuery } from '@apollo/client';\nimport Header from './header';\n\nconst AnimalList = () => {\n  _s();\n\n  const [edited, setEdited] = useState(0);\n  const [info, setInfo] = useState([]);\n\n  function handle(value) {\n    getAnimals();\n    setEdited(3);\n  } // const { loading, error, data } = useQuery(GET_ANIMALS)\n  // if (loading) return 'Loading...'\n  // else if (error) return `Error! ${error.message}`\n\n\n  const [getAnimals, {\n    loading,\n    data\n  }] = useLazyQuery(GET_ANIMALS);\n  if (loading) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Loading ...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 25\n  }, this);\n\n  if (data && data.Animals) {\n    console.log(data.Animals);\n  } // getAnimals()\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      callback: handle\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 13\n    }, this), edited !== 0 && data && data.Animals && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: 'grid',\n        gridTemplateColumns: '1fr',\n        gridGap: '10px'\n      },\n      children: data.Animals.map(item => {\n        return /*#__PURE__*/_jsxDEV(CardList, {\n          id: item.id,\n          name: item.name,\n          food: item.food,\n          type: item.type,\n          characterstic: item.properties.type,\n          legs: item.properties.legs\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 36\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 57\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 9\n  }, this);\n};\n\n_s(AnimalList, \"RkFvQGcrZ9PkkUVHjyq9OjKvHk8=\", false, function () {\n  return [useLazyQuery];\n});\n\n_c = AnimalList;\nexport default AnimalList;\n\nvar _c;\n\n$RefreshReg$(_c, \"AnimalList\");","map":{"version":3,"sources":["/Users/rakesh/langara/Term 4/react-apollo-graphql-wmdd-4999-sept-2020/rakesh/client/src/components/list.js"],"names":["React","useEffect","useState","GET_ANIMALS","GET_ANIMAL_NAME","CardList","useQuery","useLazyQuery","Header","AnimalList","edited","setEdited","info","setInfo","handle","value","getAnimals","loading","data","Animals","console","log","display","gridTemplateColumns","gridGap","map","item","id","name","food","type","properties","legs"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,WAAT,EAAsBC,eAAtB,QAA6C,oBAA7C;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,SAASC,QAAT,EAAmBC,YAAnB,QAAuC,gBAAvC;AACA,OAAOC,MAAP,MAAmB,UAAnB;;AAEA,MAAMC,UAAU,GAAG,MAAM;AAAA;;AAErB,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBT,QAAQ,CAAC,CAAD,CAApC;AACA,QAAM,CAACU,IAAD,EAAOC,OAAP,IAAkBX,QAAQ,CAAC,EAAD,CAAhC;;AAEA,WAASY,MAAT,CAAgBC,KAAhB,EAAuB;AACnBC,IAAAA,UAAU;AACVL,IAAAA,SAAS,CAAC,CAAD,CAAT;AACH,GARoB,CAUrB;AACA;AACA;;;AAEA,QAAM,CAACK,UAAD,EAAa;AAAEC,IAAAA,OAAF;AAAWC,IAAAA;AAAX,GAAb,IAAkCX,YAAY,CAACJ,WAAD,CAApD;AAEA,MAAIc,OAAJ,EAAa,oBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;;AACb,MAAIC,IAAI,IAAIA,IAAI,CAACC,OAAjB,EAA0B;AACtBC,IAAAA,OAAO,CAACC,GAAR,CAAYH,IAAI,CAACC,OAAjB;AACH,GAnBoB,CAqBrB;;;AAEA,sBACI;AAAA,4BAII,QAAC,MAAD;AAAQ,MAAA,QAAQ,EAAEL;AAAlB;AAAA;AAAA;AAAA;AAAA,YAJJ,EAMQJ,MAAM,KAAK,CAAX,IAAgBQ,IAAhB,IAAwBA,IAAI,CAACC,OAA7B,iBAAwC;AAAK,MAAA,KAAK,EAAE;AAAEG,QAAAA,OAAO,EAAE,MAAX;AAAmBC,QAAAA,mBAAmB,EAAE,KAAxC;AAA+CC,QAAAA,OAAO,EAAE;AAAxD,OAAZ;AAAA,gBAEhCN,IAAI,CAACC,OAAL,CAAaM,GAAb,CAAiBC,IAAI,IAAI;AACrB,4BAAO,QAAC,QAAD;AAAU,UAAA,EAAE,EAAEA,IAAI,CAACC,EAAnB;AAAuB,UAAA,IAAI,EAAED,IAAI,CAACE,IAAlC;AAAwC,UAAA,IAAI,EAAEF,IAAI,CAACG,IAAnD;AAAyD,UAAA,IAAI,EAAEH,IAAI,CAACI,IAApE;AAA0E,UAAA,aAAa,EAAEJ,IAAI,CAACK,UAAL,CAAgBD,IAAzG;AAA+G,UAAA,IAAI,EAAEJ,IAAI,CAACK,UAAL,CAAgBC;AAArI;AAAA;AAAA;AAAA;AAAA,gBAAP;AACH,OAFD;AAFgC;AAAA;AAAA;AAAA;AAAA,YANhD;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAiBH,CAxCD;;GAAMvB,U;UAcsCF,Y;;;KAdtCE,U;AA0CN,eAAeA,UAAf","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport { GET_ANIMALS, GET_ANIMAL_NAME } from '../graphql/queries'\nimport CardList from './cardList'\nimport { useQuery, useLazyQuery } from '@apollo/client';\nimport Header from './header'\n\nconst AnimalList = () => {\n\n    const [edited, setEdited] = useState(0)\n    const [info, setInfo] = useState([])\n\n    function handle(value) {\n        getAnimals()\n        setEdited(3)\n    }\n\n    // const { loading, error, data } = useQuery(GET_ANIMALS)\n    // if (loading) return 'Loading...'\n    // else if (error) return `Error! ${error.message}`\n\n    const [getAnimals, { loading, data }] = useLazyQuery(GET_ANIMALS);\n\n    if (loading) return <p>Loading ...</p>;\n    if (data && data.Animals) {\n        console.log(data.Animals);\n    }\n\n    // getAnimals()\n\n    return (\n        <div>\n\n\n\n            <Header callback={handle} />\n            {\n                edited !== 0 && data && data.Animals && <div style={{ display: 'grid', gridTemplateColumns: '1fr', gridGap: '10px' }}>\n                    {\n                        data.Animals.map(item => {\n                            return <CardList id={item.id} name={item.name} food={item.food} type={item.type} characterstic={item.properties.type} legs={item.properties.legs} />\n                        })\n                    }\n                </div>\n            }\n        </div>\n    )\n}\n\nexport default AnimalList"]},"metadata":{},"sourceType":"module"}